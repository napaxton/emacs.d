#+TITLE: Emacs configuration
* Your customizations
You will need to tell Emacs a little about your particular setup:

First, let Emacs know where it is you keep your master =.bib= file:

#+BEGIN_SRC emacs-lisp
  (defvar my/bib-file-location "~/references.bib"
    "Where I keep my bib file.")

;; I like the default splash screen, but if the window is not large enough, it will not show the logo and everything
;; See https://www.emacswiki.org/emacs/FrameSize for further help
(when window-system (set-frame-size (selected-frame) 80 60))
(add-to-list 'default-frame-alist '(height . 60))

;; Bigger fonts fro older eyes
(set-default-font "Menlo 13")

#+END_SRC

* Use-package
We'll use the excellent use-package package to manage packages.
We need to make sure it's installed, though:

#+BEGIN_SRC emacs-lisp
  ;; We'll use the use-package package to mange our config. Make sure
  ;; it's installed:
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Make use-package available for use:
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)

#+END_SRC
* No-littering

no-littering keeps the .emacs.d folder clean by putting files into appropriate subfolders rather than letting them get saved all over the place:

#+BEGIN_SRC emacs-lisp

(use-package no-littering
  :demand t)

#+END_SRC

* Dealing with default emacs
Emacs was created probably before you were born, which makes it super ancient in computer terms. In this section, we override some of the (now) silly default behavior so that emacs acts more like we expect a program to act in the 21st century. We'll load up some better default settings, activate auto-completion, and enable a smart way of dealing with pairs (e.g. parentheses, quotes, etc)

In particular, we load =better-defaults=, a package that selects some better default settings for Emacs. it you're interested what it does, you can look at it [[https://github.com/technomancy/better-defaults][on github]]:

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode) ; if I select something then type, delete it and replace it
  ;;(use-package better-defaults
  ;;  :ensure t)
  ;;(menu-bar-mode) ; better-defaults disables this but it's useful when you're getting used to Emacs
  ;;(tool-bar-mode) ; I like the tool bar
  (setq scroll-conservatively 1000) ; when point moves offscreen, don't jump to recenter it
  ;;(setq ring-bell-function 'ignore)
#+END_SRC

In my world, =C-z= is undo, not minimize emacs:

#+BEGIN_SRC emacs-lisp
  (bind-key "C-z" #'undo)
#+END_SRC

We also want words to wrap around nicely. The default behavior wraps in the middle of a word, which is awful:

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
#+END_SRC

** Fix for Mac
Emacs on Mac sometimes can't find installed programs (e.g. R, spellcheck).
This fixes that by making Emacs know about the same PATH as the rest of the system.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (eq system-type 'darwin)
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

** Auto completion
We'll use =company= (short for "complete anything") to do auto-completion. This will, for example, enable the same kind of pop-up messages that mimic [[https://support.rstudio.com/hc/en-us/articles/205273297-Code-Completion][Rstudio's autocomplete features]]. As of this writing (August 2016), Emacs' autocompletion isn't quite as good as Rstudios. In particular, it won't pick up on variables from =data.frames= that you've passed to e.g. =dplyr= functions through piping calls. (e.g. ~mtcars %>% filter()~) won't give you =mpg= as an option inside the filter statement. Having said that, =company= does a really good job:

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook
    (after-init . global-company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-common-or-cycle)))
#+END_SRC

** Parens
Show-parens-mode highlights matching parens, and electric-pair-mode tries to automatically match them (so when you type an opening paren, a closing one gets inserted too).

#+BEGIN_SRC emacs-lisp
  ;; Highlight matching parens & other pairs
  (show-paren-mode)
  ;; Automatically try to balance parens & other pairs
  (electric-pair-mode)
#+END_SRC

** Backup files
I want emacs to make these, but don't want to clutter up my project folders with tons of backup files. Solution: put them in the ~.emacs.d/~ directory.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))
#+END_SRC
   
** Spell check 
We can use =flyspell= for on-the-fly spell checking, similar to what we get with MS Word or whatever.
=C-;= runs =flyspell-auto-correct-previous-word= which automatically corrects the last word still on screen.
If it doesn't guess right the first time, press it again.

For this to work, you'll need to have aspell or hunspell installed!
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :hook
    (text-mode . turn-on-flyspell)
    (prog-mode . flyspell-prog-mode))
#+END_SRC
* R (ESS)
ESS (short for Emacs Speaks Statistics) is the package that lets Emacs know about R and how it works.
Let's load it up.

#+BEGIN_SRC emacs-lisp
  (use-package ess-site
    :ensure ess
    :demand t
    :config
    ;; Don't hog Emacs when submitting long-running code
    (setq ess-eval-visibly 'nowait))
#+END_SRC

* Latex (AuCTeX)
If you use latex to do any writing, you'll be happy to know that emacs is the highest-rated latex editor [[http://tex.stackexchange.com/questions/339/latex-editors-ides/][on stackexchange]].
  
#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq TeX-parse-self t)
    ;; Here we make auctex aware of latexmk and xelatexmk. We can use
    ;; these instead of calling pdflatex, bibtex, pdflatex, pdflatex (or
    ;; similar). I'll set latexmk as the default as there's really no
    ;; reason to use pdflatex
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk")))
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk")))
    (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk"))))
#+END_SRC

* Markdown
Markdown is a good way to write up most things, though it doesn't hold a candle to emacs's built-in org-mode.

We can use it with rmarkdown files too.
You can type =C-c '= to open a code buffer inside an R code block.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.Rmd\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :bind
    (:map markdown-mode-map
        ("M-p" . markdown-previous-visible-heading)
        ("M-n" . markdown-next-visible-heading))
    :config
    (setq markdown-enable-math t
        markdown-fontify-code-blocks-natively t))

#+END_SRC

* Git (magit)
Magit is an Emacs package that makes dealing with git awesome.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

* Ivy
Ivy is a completion framework that helps you find things (files, emacs commands, etc).
We set it up here with a super minimal configuration because the reference guide is pretty good.
Another completion framework you might be interested in is helm.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))
#+END_SRC

* References & bibliographies 
This package configuration lets you type =C-c C-r=  to bring up a list of your references. You can then search through it til you find the one you want. Hitting =RET= inserts a citation. There are a few other things you can do besides inserting citations - have a look by highlighting a bib entry and pressing =M-o=.

=ivy-bibtex= can also keep track of pdfs of articles and notes that you take pertaining to these articles. Since this is a "minimal" configuration, I don't set that up here. If you're interested, look at =bibtex-completion-library-path= and =bibtex-completion-notes-path=

#+BEGIN_SRC emacs-lisp
  (use-package ivy-bibtex
    :ensure t
    :bind*
    ("C-c C-r" . ivy-bibtex)
    :config
    (setq bibtex-completion-bibliography my/bib-file-location)
    ;; default is to open pdf - change that to insert citation
    (setq ivy-bibtex-default-action #'ivy-bibtex-insert-citation))
#+END_SRC

* Org Mode 

Org mode is a great thing. I use it for writing academic papers,
managing my schedule, managing my references and notes, writing
presentations, writing lecture slides, and pretty much anything
else.

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  (("C-c l" . org-store-link)
   ("C-'" . org-cycle-agenda-files) ; quickly access agenda files
   :map org-mode-map
   ("C-a" . org-beginning-of-line)
   ("C-e" . org-end-of-line)
   ;; Bind M-p and M-n to navigate heading more easily (these are bound to
   ;; C-c C-p/n by default):
   ("M-p" . my/org-previous-visible-heading)
   ("M-n" . my/org-next-visible-heading)
   ;; C-c C-t is bound to `org-todo' by default, but I want it
   ;; bound to C-c t as well:
   ("C-c t" . org-todo))
  :hook
  (org-mode . my/setup-org-mode)
  :custom
  (org-blank-before-new-entry nil)
  (org-cycle-separator-lines 0)
  (org-pretty-entities t "UTF8 all the things!")
  (org-support-shift-select t "Holding shift and moving point should select things.")
  (org-fontify-quote-and-verse-blocks t "Provide a special face for quote and verse blocks.")
  (org-M-RET-may-split-line nil "M-RET may never split a line.")
  (org-enforce-todo-dependencies t "Can't finish parent before children.")
  (org-enforce-todo-checkbox-dependencies t "Can't finish parent before children.")
  (org-hide-emphasis-markers t "Make words italic or bold, hide / and *.")
  (org-catch-invisible-edits 'show-and-error "Don't let me edit things I can't see.")
  (org-special-ctrl-a/e t "Make C-a and C-e work more like how I want:.")
  (org-preview-latex-default-process 'imagemagick "Let org's preview mechanism use imagemagick instead of dvipng.")
  ;; Let imenu go deeper into menu structure
  (org-imenu-depth 6)
  (org-image-actual-width '(300))
  (org-blank-before-new-entry '((heading . nil)
                                (plain-list-item . nil)))
  ;; For whatever reason, I have to explicitely tell org how to open pdf
  ;; links.  I use pdf-tools.  If pdf-tools isn't installed, it will use
  ;; doc-view (shipped with Emacs) instead.
  (org-file-apps
   '((auto-mode . emacs)
     ("\\.mm\\'" . default)
     ("\\.x?html?\\'" . default)
     ("\\.pdf\\'" . emacs)))
  (org-highlight-latex-and-related '(latex entities) "set up fontlocking for latex")
  (org-startup-with-inline-images t "Show inline images.")
  (org-log-done 'time)
  (org-goto-interface 'outline-path-completion)
  (org-ellipsis "⬎")
  (org-tag-persistent-alist '(("jobs" . ?j)
                              (:startgroup . nil)
                              ("@work" . ?w)
                              ("@home" . ?h)
                              (:endgroup . nil)))
  ;; I keep my recipes in an org file and tag them based on what kind of
  ;; dish they are.  The level one headings are names, and each gets two
  ;; level two headings --- ingredients and directions.  To easily search via
  ;; tag, I can restrict org-agenda to that buffer using < then hit m to
  ;; match based on a tag.
;;  (org-tags-exclude-from-inheritance
;;   '("BREAKFAST" "DINNER" "DESSERT" "SIDE" "CHICKEN" "PORK" "SEAFOOD"
;;     "BEEF" "PASTA" "SOUP" "SNACK" "DRINK" "LAMB" "VEGETARIAN"))
  ;; Org-refile lets me quickly move around headings in org files.  It
  ;; plays nicely with org-capture, which I use to turn emails into TODOs
  ;; easily (among other things, of course)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile-use-outline-path 'file)
  :custom-face
  (org-block ((t (:inherit default))))
  :config
  (setq org-refile-targets '((nil . (:level . 1)) ; current file
                             (org-default-notes-file . (:maxlevel . 6))
                             (my/org-scheduled . (:level . 1))))
  ;; These are the programming languages org should teach itself:
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (python . t)
     (R . t)
     (shell . t)))
  ;; remove C-c [ from adding org file to front of agenda
  (unbind-key "C-c [" org-mode-map)
  (defun my/setup-org-mode ()
    "Setup org-mode."
    ;; An alist of symbols to prettify, see `prettify-symbols-alist'.
    ;; Whether the symbol actually gets prettified is controlled by
    ;; `org-pretty-compose-p', which see.
    (setq-local prettify-symbols-unprettify-at-point nil)
    (setq-local prettify-symbols-alist '(("*" . ?•)))
    (setq-local prettify-symbols-compose-predicate #'my/org-pretty-compose-p))
  (defun my/org-next-visible-heading (arg)
    "Go to next heading and beginning of line."
    (interactive "p")
    (org-next-visible-heading arg)
    (org-beginning-of-line))
  (defun my/org-previous-visible-heading (arg)
    "Go to previous heading and beginning of line."
    (interactive "p")
    (org-previous-visible-heading arg)
    (org-beginning-of-line))
  (defun my/org-pretty-compose-p (start end match)
    "Return t if the symbol should be prettified.
START and END are the start and end points, MATCH is the string
match.  See also `prettify-symbols-compose-predicate'."
    (if (string= match "*")
        ;; prettify asterisks in headings
        (and (org-match-line org-outline-regexp-bol)
             (< end (match-end 0)))
      ;; else rely on the default function
      (prettify-symbols-default-compose-p start end match))))

#+END_SRC

* Nathan customizations

From Alex Branham gitlab personal emacs file. 

#+BEGIN_SRC emacs-lisp
(use-package dired
  ;; Emacs can act as your file finder/explorer.  Dired is the built-in way
  ;; to do this.
  :defer t
  :bind
  (("C-x C-d" . dired) ; overrides list-directory, which I never use
   :map  dired-mode-map
   ("l" . dired-up-directory)) ; use l to go up in dired
  :config
  ;; on macOS, ls doesn't support the --dired option while on Linux it is supported.
  (when (string= system-type "darwin")       
    (setq dired-use-ls-dired nil))
  (setq dired-auto-revert-buffer t)
  (setq dired-create-destination-dirs 'ask)
  (setq dired-dwim-target t)
  (setq dired-isearch-filenames 'dwim)
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  ;; -l: long listing format REQUIRED in dired-listing-switches
  ;; -a: show everything (including dotfiles)
  ;; -h: human-readable file sizes
  (setq dired-listing-switches "-alh --group-directories-first")
  (defun my/dired-ediff-marked ()
    "Run `ediff' on two marked files in a dired buffer."
    (interactive)
    (unless (eq 'dired-mode major-mode)
      (error "For use in dired buffers only"))
    (let ((files (dired-get-marked-files)))
      (when (not (eq 2 (length files)))
        (error "Two files not marked"))
      (ediff (car files) (nth 1 files)))))

(use-package dired-x
  :hook
  (dired-load . (lambda () (load "dired-x" nil t)))
  :bind
  ("C-x C-j" . dired-jump)
  :custom
  ;; By default, dired asks you if you want to delete the dired buffer if
  ;; you delete the folder. I can't think of a reason I'd ever want to do
  ;; that.
  (dired-clean-confirm-killing-deleted-buffers nil))

(use-package flymake
  :defer t
  :custom
  (flymake-proc-compilation-prevents-syntax-check nil)
  :hook
  ;; Some modes turn `flymake-mode' on by default, I have to tell these
  ;; specifically to do it:
  ((emacs-lisp-mode python-mode LaTeX-mode). flymake-mode)
  :bind
  (:map flymake-mode-map
        ("M-P" . flymake-goto-prev-error)
        ("M-N" . flymake-goto-next-error))
  :config
  (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake))

(use-package flyspell
  ;; on the fly spell checking
  :hook
  (text-mode . turn-on-flyspell)
  (prog-mode . flyspell-prog-mode)
  :custom
  (flyspell-use-meta-tab nil)
  (flyspell-abbrev-p t)
  (flyspell-issue-welcome-flag nil)
  (flyspell-use-global-abbrev-table-p t))

(use-package footnote
  :defer
  :hook
  (message-mode . footnote-mode))

(use-package ivy
  :bind
  ("C-M-z" . ivy-resume)
  ([remap list-buffers] . ivy-switch-buffer)
  :config
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-use-virtual-buffers t)
  (setq ivy-extra-directories '("./"))
  (dolist (fun '(org-refile org-agenda-refile org-capture-refile))
    (setq ivy-initial-inputs-alist
          (delete `(,fun . "^") ivy-initial-inputs-alist)))
  (ivy-mode))

#+END_SRC
